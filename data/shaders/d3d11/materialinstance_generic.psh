// Material Instance shader - Generic material
//

// C++ defines:
//	UNLIT

// NOTE: Please note this macro should be up to date with C++ code: graphics\light.h
#define MAX_POINT_LIGHTS 32

#define ENABLE_PHONG

struct VSOutput
{
	float4 position		: SV_Position;
	float3 worldPos		: TEXCOORD0;
	float3 normal		: NORMAL;
	float2 texcoord		: TEXCOORD1;
	float3 tangent		: TANGENT;
	float3 bitangent	: BINORMAL;
};

cbuffer GlobalData : register(b0)
{
	row_major float4x4 g_modelMatrix;
	row_major float4x4 g_viewMatrix;
	row_major float4x4 g_projectionMatrix;
	row_major float4x4 g_modelViewProjection;

	float4 g_viewPos;
	float4 g_viewDir;
};

cbuffer DirectionalLightCB : register(b2)
{
	float4 g_DirLight_direction;
	float4 g_DirLight_ambientColor;
	float4 g_DirLight_color;
};

struct PointLight
{
	float4 position;
	float4 color;
	float4 specular;
	float4 lightData; // x - linear, y - quadratic, z - fallouf
};

cbuffer PointLightCB : register(b3)
{
	PointLight g_pointLights[MAX_POINT_LIGHTS];
};

cbuffer LightGlobalDataCB : register(b4)
{
	uint g_pointLightCount;
	uint g_spotLightCount;
	uint padding0;
	uint padding1;
};

Texture2D g_albedoTexture;
SamplerState g_albedoSampler;

float4 PSMain(VSOutput input) : SV_Target
{
	const float3 kSpecColor = float3(2.0f, 2.0f, 2.0f);
	const float kSpecPower = 256.0f;

	float3 ambientColor = g_DirLight_ambientColor.xyz;
	float3 albedoColor = g_albedoTexture.Sample(g_albedoSampler, input.texcoord).rgb;

#ifdef UNLIT
	return float4(albedoColor, 1.0f);
#endif

#ifdef ENABLE_PHONG
	float3 N = input.normal;
	float3 L = -g_DirLight_direction.xyz;
	float3 V = normalize(g_viewPos.xyz - input.worldPos);
	float3 H = normalize(L + V);

	float NdotL = max(0.0f, dot(N, L));
	float NdotH = max(0.0f, dot(N, H));

	float3 diffuseColor = ambientColor + NdotL * g_DirLight_color.rgb;
	float3 specularColor  = pow(NdotH, kSpecPower) * kSpecColor;

	float3 finalColor = albedoColor * (diffuseColor + specularColor);
	return float4(finalColor, 1.0f);
#else
	float3 N = input.normal;
	float3 L = -g_DirLight_direction.xyz;
	float3 V = g_viewDir.xyz;
	float NdotL = max(0, dot(N, L));

	float3 finalColor = albedoColor * (ambientColor + NdotL * g_DirLight_color.rgb);
	return float4(finalColor, 1.0f);
#endif
}