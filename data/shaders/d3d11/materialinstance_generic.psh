// Material Instance shader - Generic material
//

// C++ defines:
//	UNLIT

#include "cbuffers.h"

struct VSOutput
{
	float4 position		: SV_Position;
	float3 worldPos		: TEXCOORD0;
	float3 normal		: NORMAL;
	float2 texcoord		: TEXCOORD1;
	float3 tangent		: TANGENT;
	float3 bitangent	: BINORMAL;
};

Texture2D 			g_albedoTexture : register(t0);
SamplerState		g_albedoSampler : register(s0);
Texture2D 			g_normalTexture : register(t1);
SamplerState		g_normalSampler : register(s1);

float3 pointLightPhong(float3 diffuseColor, float3 specularColor, float specularPower, float3 L, float3 N, float3 R)
{
	float diffuseLigthing = max(dot(N, L), 0);

	float specularStrength = 256.0f;
	float specularLigthing = pow(max(dot(R, L), 0.0), specularPower);
	
	return diffuseColor * diffuseLigthing + specularLigthing * specularColor * specularStrength;
}

float lightAttenuation(float3 lightPosition, float3 position, float radius)
{
	float3 distance = (lightPosition - position) / radius;
	float attenuation = 1.0f - dot(distance, distance);
	return attenuation;
}

float3 gammaCorrectionRGB(float3 color)
{
	float gamma = 2.2;
	return float3(pow(color.rgb, float3(gamma, gamma, gamma)));
}

float3 materialAlbedo(float2 texcoord)
{
	// sample texture
	float3 albedo = g_albedoTexture.Sample(g_albedoSampler, texcoord).rgb;
	
	// apply gamma correction and return the sampled albedo texture
	return gammaCorrectionRGB(albedo);
}

float4 PSMain(VSOutput input) : SV_Target
{
	//return float4(input.normal, 1.0f);

	const float3 kSpecColor = float3(2.0f, 2.0f, 2.0f);
	const float kSpecPower = 256.0f;

	float3 ambientColor = g_DirLight_ambientColor.xyz;
	//float3 albedoColor = g_albedoTexture.Sample(g_albedoSampler, input.texcoord).rgb;
	float3 albedoColor = materialAlbedo(input.texcoord);

#ifdef UNLIT
	return float4(albedoColor, 1.0f);
#endif

	float3 N = input.normal;
	float3 L = -g_DirLight_direction.xyz;
	float3 V = normalize(g_viewPos.xyz - input.worldPos);
	float3 H = normalize(L + V);

	float NdotL = max(0.0f, dot(N, L));
	float NdotH = max(0.0f, dot(N, H));

	float3 diffuseColor = ambientColor + NdotL * g_DirLight_color.rgb;
	float3 specularColor  = pow(NdotH, kSpecPower) * kSpecColor;
	
	float3 ligthing = float3(0.0f, 0.0f, 0.0f);
	for (int i = 0; i < g_pointLightCount; i++)
	{
		// get local copy of point light from ubo
		PointLight pointLight = g_pointLights[i];
		
		float3 PL = normalize(pointLight.position.xyz - input.worldPos);
		float3 R = reflect(-PL, input.normal);
		
		// we store point light radius in r component
		float radius = pointLight.lightData.r;
		
		// light attenuation
		float lightDistance = length(pointLight.position.xyz - input.worldPos) / radius;
		float attenuation = 1.0 / (1.0 + lightDistance * lightDistance);
		
		ligthing += pointLightPhong(pointLight.color.rgb, pointLight.specular.rgb, 2.0, PL, input.normal, R) * attenuation;
	}
	
	//float3 finalColor = albedoColor * (diffuseColor + specularColor);
	float3 finalColor = albedoColor * (diffuseColor + specularColor + ligthing);
	//float3 finalColor = albedoColor * (ligthing);
	return float4(finalColor, 1.0f);
}