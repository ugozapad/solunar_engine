#version 330 core

in vec3 v_position;
in vec3 v_normal;
in vec2 v_texcoord;
in vec3 v_tangent;
in vec3 v_bitangent;
in mat3 v_tbn;

out vec4 fragColor;

uniform vec3 u_viewPos;

// material data
uniform vec4 u_albedoColor;

uniform sampler2D u_albedoTexture;
uniform sampler2D u_normalTexture;
uniform sampler2D u_specularTexture;

uniform bool u_hasNormalTexture;
uniform bool u_hasSpecularTexture;

uniform bool u_selfillum;

//const bool HasNormalMap = NORMALMAP;

#ifdef WIREFRAME
uniform vec4 wireframeColor;
#endif

// This define must be has exactly size as MAX_POINT_LIGHTS in C++ code
#define MAX_POINT_LIGHTS 32

// This structure must be has exactly size as PointLightCB in C++ code
struct PointLight
{
	vec4 pos;

	// colors
	vec4 color;
	vec4 specular;
	
	// light data
	vec4 lightData;
};

// How many lights has passed to shader
uniform int u_lightsCount;

layout(std140) uniform PointLights
{
	PointLight g_pointLights[MAX_POINT_LIGHTS];
};

vec4 gammaCorrection(vec4 color)
{
	float gamma = 2.2;
	return vec4(pow(color.rgb, vec3(gamma)), color.a);
}

vec3 gammaCorrectionRGB(vec3 color)
{
	float gamma = 2.2;
	return vec3(pow(color.rgb, vec3(gamma)));
}

vec3 pointLightPhong(vec3 diffuseColor, vec3 specularColor, float specularPower, vec3 L, vec3 N, vec3 R)
{
	float diffuseLigthing = max(dot(N, L), 0);

	float specularStrength = 50.0;
	float specularLigthing = pow(max(dot(R, L), 0.0), specularPower);
	
	return diffuseColor * diffuseLigthing + specularLigthing * specularColor * specularStrength;
}

float lightAttenuation(vec3 lightPosition, vec3 position, float radius)
{
	vec3 distance = (lightPosition - position) / radius;
	float attenuation = 1.0f - dot(distance, distance);
	return attenuation;
}

vec3 materialAlbedo(vec2 texcoord, vec4 albedoColor)
{
	// sample texture
	vec3 albedo = texture(u_albedoTexture, texcoord).rgb;
	
	// apply material color
	albedo *= albedoColor.rgb;
	
	// apply gamma correction and return the sampled albedo texture
	return gammaCorrectionRGB(albedo);
}

void main()
{
#ifdef WIREFRAME
	fragColor = vec4(wireframeColor.rgb, 1.0);
	return;
#endif

	vec3 albedo = materialAlbedo(v_texcoord, u_albedoColor);
	
#ifdef UNLIT
	fragColor = vec4(albedo, 1.0);
	return;
#endif
	
	vec3 viewDir = normalize(u_viewPos - v_position);
	vec3 normal = normalize(v_normal);
	
	// is specified normal map then calculate fragment normal with normal map xddd
	if (u_hasNormalTexture)
	{
		// sample normal map
		normal = texture(u_normalTexture, v_texcoord).xyz;
		normal = normalize(normal * 2.0 - 1.0);
		normal = normalize(v_tbn * normal);
	}

	vec3 specular = vec3(1.0);

	// sample specular texture
	if (u_hasSpecularTexture)
	{
		specular = texture(u_specularTexture, v_texcoord).rgb;
	}
	
	// #TODO: Replace with define statement (or use unlit shader ???)
	if (u_selfillum)
	{
		fragColor = vec4(albedo, 1.0);
		return;
	}

	vec3 ligthing = vec3(0.0);
	for (int i = 0; i < u_lightsCount; i++)
	{
		// get local copy of point light from ubo
		PointLight pointLight = g_pointLights[i];
		
		vec3 L = normalize(pointLight.pos.xyz - v_position);
		vec3 R = reflect(-L, normal);
		
		// we store point light radius in r component
		float radius = pointLight.lightData.r;
		
		// light attenuation
		float lightDistance = length(pointLight.pos.xyz - v_position) / radius;
		float attenuation = 1.0 / (1.0 + lightDistance * lightDistance);
		
		//float attenuation = lightAttenuation(pointLight.pos.xyz, v_position, radius);
		
		ligthing += pointLightPhong(pointLight.color.rgb * 10, pointLight.specular.rgb, 32.0, L, normal, R) * attenuation;
	}
		
	//ligthing *= 10.0;
		
	vec3 result = (albedo * ligthing);
	fragColor = vec4(result, 1.0);
}